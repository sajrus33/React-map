{"version":3,"sources":["components/Accordion.js","components/Popup.js","components/Map.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["AccordionBs","props","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","style","backgroundColor","variant","eventKey","Collapse","Body","height","padding","map","table","Popup","onSubmit","onCancel","onChange","position","zIndex","width","Modal","Dialog","postion","closeButton","onClick","Title","Form","Group","controlId","Label","Control","type","placeholder","Map","handleClick","changeViewport","viewport","markers","onDragStart","onDragEnd","mapboxApiAccessToken","onViewportChange","length","m","i","draggable","latitude","lat","longitude","lng","key","name","TableRow","TableBs","Table","striped","bordered","hover","size","App","state","zoom","pitch","bearing","popupShow","draggedMarkerName","newMarkerPos","newMarkerTxt","resizeMap","setState","changeMapViewport","handleMapClick","lngLat","popupOnChange","e","target","value","validCounter","validateMarkerName","find","newName","slice","popupOnSubmit","preventDefault","newMarker","Object","assign","popupOnCancel","dragStart","innerText","dragEnd","acutalLng","actualLat","draggedName","droppedMarker","droppedIndex","indexOf","window","addEventListener","this","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eac227d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Accordion, Button, Card } from 'react-bootstrap';\r\n\r\n\r\nconst AccordionBs = props => {\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n                <Card.Header>\r\n                    <Accordion.Toggle as={Button} style={{ backgroundColor: '#17a2b8' }} variant=\"button\" eventKey=\"0\">\r\n                        Map\r\n            </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body style={{ height: \"calc(100vh - 128px)\", padding: 0 }}>\r\n                        {props.map}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Accordion.Toggle as={Button} style={{ backgroundColor: '#17a2b8' }} variant=\"button\" eventKey=\"1\">\r\n                        Targets table\r\n            </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"1\">\r\n                    <Card.Body style={{ padding: 0 }}>\r\n                        {props.table}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n    )\r\n}\r\n\r\nexport default AccordionBs;\r\n","import React from \"react\";\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\n\r\nconst Popup = props => {\r\n    const { onSubmit, onCancel, onChange } = props;\r\n    return (\r\n        <div style={{ position: \"fixed\", zIndex: 3, width: \"100%\", height: \"100%\", backgroundColor: \"rgba(0,0,0,.25)\" }}>\r\n            <Modal.Dialog style={{ postion: \"absolute\" }}>\r\n                <Modal.Header closeButton onClick={onCancel} >\r\n                    <Modal.Title>New location</Modal.Title>\r\n                </Modal.Header>\r\n                <Form style={{ padding: \"16px\" }}>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Location name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"name\" onChange={onChange} />\r\n                    </Form.Group>\r\n                    <Button onClick={onSubmit} variant=\"primary\" type=\"submit\">\r\n                        Save\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Dialog>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport InteractiveMap, { Marker } from \"react-map-gl\";\r\n\r\n\r\nconst Map = props => {\r\n    const { handleClick, changeViewport, viewport, markers, onDragStart, onDragEnd } = props;\r\n    return (\r\n\r\n        <InteractiveMap\r\n            onClick={handleClick}\r\n            mapboxApiAccessToken=\"pk.eyJ1Ijoic2FqcnVzMzMiLCJhIjoiY2p6ZmQ5Y3hhMGF6MjNocWs3Mnd0ZzhzZCJ9.euviib6S8dQJyse2LRvtTw\"\r\n            onViewportChange={changeViewport}\r\n            {...viewport}\r\n        >\r\n            {markers.length\r\n                ? markers.map((m, i) => (\r\n                    <Marker\r\n                        draggable\r\n                        onDragStart={onDragStart}\r\n                        onDragEnd={onDragEnd}\r\n                        latitude={m.lat}\r\n                        longitude={m.lng}\r\n                        key={i}>\r\n                        {m.name}\r\n                    </Marker>\r\n                ))\r\n                : null}\r\n        </InteractiveMap>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Map;\r\n","\r\nimport React from \"react\";\r\n\r\n\r\nconst TableRow = props => {\r\n    const { i, name, lng, lat } = props;\r\n    return (\r\n        <tr>\r\n            <td>{i}</td>\r\n            <td>{name}</td>\r\n            <td>{lng}</td>\r\n            <td>{lat}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow;\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { Table } from 'react-bootstrap';\r\nimport TableRow from \"./TableRow\";\r\n\r\n\r\nconst TableBs = props => {\r\n    const { markers } = props;\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Name</th>\r\n                    <th>longitude</th>\r\n                    <th>latitude</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {markers.map((m, i) => <TableRow name={m.name} lng={m.lng} lat={m.lat} key={i} i={i + 1} />)}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default TableBs;\r\n","import React, { Component, Fragment } from \"react\";\nimport Accordion from \"./components/Accordion\";\nimport Popup from \"./components/Popup\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\n\nclass App extends Component {\n\n  state = {\n    markers: [],\n    viewport: {\n      width: \"100%\",\n      height: \"100%\",\n      latitude: 50.00,\n      longitude: 20.00,\n      zoom: 14.5,\n      pitch: 40,\n      bearing: 0\n    },\n    popupShow: false,\n    draggedMarkerName: null,\n    newMarkerPos: null,\n    newMarkerTxt: \"location\"\n  }\n\n  /*   \n   resize viewport\n  */\n  componentDidMount() {\n    window.addEventListener('resize', this.resizeMap, false)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeMap);\n  }\n\n  resizeMap = () => {\n    const viewport = { ...this.state.viewport }\n    viewport.width = \"100%\";\n    viewport.height = \"100%\";\n    this.setState({\n      viewport\n    });\n  }\n\n  changeMapViewport = (viewport) => {\n    this.setState({ viewport })\n  }\n\n\n  /*\n   creating marker\n  */\n  handleMapClick = ({ lngLat: [lng, lat] }) => {\n    this.setState({\n      newMarkerPos: { lng, lat },\n      popupShow: true\n    })\n  }\n\n  popupOnChange = e => {\n    this.setState({\n      newMarkerTxt: e.target.value\n    })\n  }\n\n  // valid nr for next equal marker name \n  validCounter = 0;\n  validateMarkerName = (name) => {\n    const notValidName = this.state.markers.find(m => m.name === name)\n    if (notValidName) {\n      this.validCounter++;\n      let newName = name;\n      if (this.validCounter > 1) {\n        newName = newName.slice(0, -1);\n      }\n      newName += this.validCounter;\n\n      return this.validateMarkerName(newName)\n\n    } else {\n      // reset valid counter\n      this.validCounter = 0;\n      return name\n    }\n  }\n\n  popupOnSubmit = e => {\n    e.preventDefault();\n    const name = this.validateMarkerName(this.state.newMarkerTxt);\n\n    const newMarker = Object.assign({}, this.state.newMarkerPos, { name });\n    this.setState({\n      markers: [...this.state.markers, newMarker],\n      newMarkerTxt: \"location\",\n      popupShow: false\n    })\n  }\n\n  popupOnCancel = e => {\n    this.setState({\n      popupShow: false,\n      newMarkerTxt: \"location\"\n\n    })\n  }\n\n  /*   \n  dragging markers\n  */\n\n  dragStart = e => {\n    this.setState({\n      draggedMarkerName: e.target.innerText\n    })\n  };\n\n  dragEnd = e => {\n    const [acutalLng, actualLat] = e.lngLat;\n    const draggedName = this.state.draggedMarkerName;\n    const markers = this.state.markers;\n\n    const droppedMarker = markers.find(m => m.name === draggedName);\n    const droppedIndex = markers.indexOf(droppedMarker);\n\n    if (droppedIndex >= 0) {\n      markers[droppedIndex] = Object.assign(markers[droppedIndex], { lng: acutalLng, lat: actualLat });\n      this.setState({\n        markers\n      })\n    }\n  };\n\n\n  render() {\n    const { markers, viewport, popupShow } = this.state;\n    return (\n      <Fragment>\n        {popupShow ? <Popup onSubmit={this.popupOnSubmit} onCancel={this.popupOnCancel} onChange={this.popupOnChange} ></Popup> : null}\n        <Accordion\n          map=\n          {<Map\n            handleClick={this.handleMapClick}\n            changeViewport={this.changeMapViewport}\n            markers={markers}\n            viewport={viewport}\n            onDragStart={this.dragStart}\n            onDragEnd={this.dragEnd}\n          ></Map>}\n          table=\n          {<Table markers={markers}></Table>}>\n        </Accordion>\n      </Fragment>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}